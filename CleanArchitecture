# CleanArchitecture
設計思想についての本。<br>
主題としては、コンポーネントの依存関係について、後から修正による影響範囲が小さくなるように、抽象的なインターフェースに依存するようにして、詳細な設計には依存しないようにするという内容。<br>
フレームワークは依存関係の上位に位置しているので、開発者が設計を考える手間を省いてくれるが、フレームワークを変えたりする柔軟性が乏しいコードが出来上がる。<br>
データベースは詳細なので、データベース設計に上位の設計が依存してはいけない。リレーショナルデータベースではないデータベースに移行しても、詳細設計だけ変更すれば良いようにする。<br>
組み込みソフトは、ハードウェアに依存してしまうと、ハードウェアの廃止とともに使えないコードになってしまう。I/Oのインターフェースを定義して、それに依存するようにする。<br>
ハードウェアとソフトウェアの間にOSを挟むことで、ソフトウェアをハードウェアの依存から分離できる。<br>
<br>
## SOLID原則
### SRP:単一責任の原則
Single Responsibility Principle<br>
モジュールはたったひとつのアクターに対して責務を負うべきである。<br>
<br>
### OCP:オープン・クローズドの原則
Open-Closed Principle<br>
ソフトウェアの構成要素は拡張に対しては開いていて、修正に対して閉じていなければならない。<br>
<br>
### LSP:リスコフの置換原則
Liskov Substitution Principle<br>
置換可能な派生型を作ることで、拡張しやすくする。<br>
<br>
### ISP:インターフェース分離の原則
Interface Segregation Principle<br>
複数のクラスに依存している場合は、それぞれのクラスが依存するインターフェースを定義してそれに依存することで、それぞれのクラスの変更の影響を回避できる。<br>
<br>
### DIP:依存関係逆転の原則
Dependency Inversion Principle<br>
依存しているクラスにインターフェースを作ることで、クラスへの依存を無くせる。<br>
変化しやすい具象クラスを参照しない、継承しない。<br>
